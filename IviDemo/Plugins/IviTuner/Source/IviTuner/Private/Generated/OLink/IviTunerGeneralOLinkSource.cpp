/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "IviTunerGeneralOLinkSource.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Generated/api/IviTuner.json.adapter.h"
#include "unrealolink.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/iobjectsource.h"
THIRD_PARTY_INCLUDES_END

using namespace ApiGear::ObjectLink;

namespace
{
static const std::string IviTunerGeneralIdentifier{"ivi.tuner.General"};
}

DEFINE_LOG_CATEGORY(LogIviTunerGeneralOLinkSource);
IviTunerGeneralOLinkSource::IviTunerGeneralOLinkSource()
	: Host(nullptr)
{
}

void IviTunerGeneralOLinkSource::setBackendService(TScriptInterface<IIviTunerGeneralInterface> InService)
{
	// only set if interface is implemented
	if (InService.GetInterface() == nullptr)
	{
		UE_LOG(LogIviTunerGeneralOLinkSource, Error, TEXT("Cannot set backend service to %s - interface IviTunerGeneral is not fully implemented"), *InService.GetObject()->GetName());
		return;
	}

	BackendService = InService;
}
void IviTunerGeneralOLinkSource::OnAutoScanIntervalChanged(int32 InAutoScanInterval)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "autoScanInterval");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InAutoScanInterval);
		}
	}
}

void IviTunerGeneralOLinkSource::OnFavoritesSizeChanged(const FIviTunerGridSize& InFavoritesSize)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "favoritesSize");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InFavoritesSize);
		}
	}
}

void IviTunerGeneralOLinkSource::setOLinkHost(TSoftObjectPtr<UUnrealOLinkHost> InHost)
{
	Host = InHost.Get();
}

//
// IObjectSource interface
//

std::string IviTunerGeneralOLinkSource::olinkObjectName()
{
	return IviTunerGeneralIdentifier;
}

nlohmann::json IviTunerGeneralOLinkSource::olinkInvoke(const std::string& methodId, const nlohmann::json& args)
{
	if (!BackendService)
	{
		UE_LOG(LogIviTunerGeneralOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter IviTunerGeneralOLinkAdapter which implements the IviTunerGeneral interface"));
		return nlohmann::json();
	}

	const std::string path = Name::getMemberName(methodId);
	return nlohmann::json();
}

void IviTunerGeneralOLinkSource::olinkSetProperty(const std::string& propertyId, const nlohmann::json& value)
{
	if (!BackendService)
	{
		UE_LOG(LogIviTunerGeneralOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter IviTunerGeneralOLinkAdapter which implements the IviTunerGeneral interface"));
		return;
	}

	const std::string path = Name::getMemberName(propertyId);
	if (path == "autoScanInterval")
	{
		int32 AutoScanInterval = value.get<int32>();
		BackendService->Execute_SetAutoScanInterval(BackendService.GetObject(), AutoScanInterval);
	}
	if (path == "favoritesSize")
	{
		FIviTunerGridSize FavoritesSize = value.get<FIviTunerGridSize>();
		BackendService->Execute_SetFavoritesSize(BackendService.GetObject(), FavoritesSize);
	}
}

nlohmann::json IviTunerGeneralOLinkSource::olinkCollectProperties()
{
	if (!BackendService)
	{
		UE_LOG(LogIviTunerGeneralOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter IviTunerGeneralOLinkAdapter which implements the IviTunerGeneral interface"));
		return nlohmann::json();
	}

	return nlohmann::json::object({

		{"autoScanInterval", BackendService->Execute_GetAutoScanInterval(BackendService.GetObject())},
		{"favoritesSize", BackendService->Execute_GetFavoritesSize(BackendService.GetObject())}});
}
