/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "IviTunerFavoritesOLinkSource.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Generated/api/IviTuner.json.adapter.h"
#include "unrealolink.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/iobjectsource.h"
THIRD_PARTY_INCLUDES_END

using namespace ApiGear::ObjectLink;

namespace
{
static const std::string IviTunerFavoritesIdentifier{"ivi.tuner.Favorites"};
}

DEFINE_LOG_CATEGORY(LogIviTunerFavoritesOLinkSource);
IviTunerFavoritesOLinkSource::IviTunerFavoritesOLinkSource()
	: Host(nullptr)
{
}

void IviTunerFavoritesOLinkSource::setBackendService(TScriptInterface<IIviTunerFavoritesInterface> InService)
{
	// only set if interface is implemented
	if (InService.GetInterface() == nullptr)
	{
		UE_LOG(LogIviTunerFavoritesOLinkSource, Error, TEXT("Cannot set backend service to %s - interface IviTunerFavorites is not fully implemented"), *InService.GetObject()->GetName());
		return;
	}

	BackendService = InService;
}
void IviTunerFavoritesOLinkSource::OnStationsChanged(const TArray<FIviTunerStation>& InStations)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "stations");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InStations);
		}
	}
}

void IviTunerFavoritesOLinkSource::setOLinkHost(TSoftObjectPtr<UUnrealOLinkHost> InHost)
{
	Host = InHost.Get();
}

//
// IObjectSource interface
//

std::string IviTunerFavoritesOLinkSource::olinkObjectName()
{
	return IviTunerFavoritesIdentifier;
}

nlohmann::json IviTunerFavoritesOLinkSource::olinkInvoke(const std::string& methodId, const nlohmann::json& args)
{
	if (!BackendService)
	{
		UE_LOG(LogIviTunerFavoritesOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter IviTunerFavoritesOLinkAdapter which implements the IviTunerFavorites interface"));
		return nlohmann::json();
	}

	const std::string path = Name::getMemberName(methodId);
	if (path == "setStation")
	{
		int32 Index = args.at(0).get<int32>();
		FIviTunerStation Station = args.at(1).get<FIviTunerStation>();
		BackendService->Execute_SetStation(BackendService.GetObject(), Index, Station);
		return nlohmann::json{};
	}
	if (path == "resetStation")
	{
		int32 Index = args.at(0).get<int32>();
		BackendService->Execute_ResetStation(BackendService.GetObject(), Index);
		return nlohmann::json{};
	}
	if (path == "clearAll")
	{
		BackendService->Execute_ClearAll(BackendService.GetObject());
		return nlohmann::json{};
	}
	return nlohmann::json();
}

void IviTunerFavoritesOLinkSource::olinkSetProperty(const std::string& propertyId, const nlohmann::json& value)
{
	if (!BackendService)
	{
		UE_LOG(LogIviTunerFavoritesOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter IviTunerFavoritesOLinkAdapter which implements the IviTunerFavorites interface"));
		return;
	}

	const std::string path = Name::getMemberName(propertyId);
	if (path == "stations")
	{
		TArray<FIviTunerStation> Stations = value.get<TArray<FIviTunerStation>>();
		BackendService->Execute_SetStations(BackendService.GetObject(), Stations);
	}
}

nlohmann::json IviTunerFavoritesOLinkSource::olinkCollectProperties()
{
	if (!BackendService)
	{
		UE_LOG(LogIviTunerFavoritesOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter IviTunerFavoritesOLinkAdapter which implements the IviTunerFavorites interface"));
		return nlohmann::json();
	}

	return nlohmann::json::object({

		{"stations", BackendService->Execute_GetStations(BackendService.GetObject())}});
}
