/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/OLink/IviTunerFavoritesOLinkClient.h"
#include "ApiGearSettings.h"
#include "apigearolink.h"
#include "Async/Async.h"
#include "Generated/api/IviTuner.json.adapter.h"
#include "unrealolink.h"
#include "unrealolinksink.h"
#include "Engine/Engine.h"
#include "ApiGear/Public/ApiGearConnectionsStore.h"
#include "Misc/DateTime.h"
#include "IviTunerSettings.h"
THIRD_PARTY_INCLUDES_START
#include "olink/clientnode.h"
#include "olink/iobjectsink.h"
THIRD_PARTY_INCLUDES_END
#include "HAL/CriticalSection.h"

/**
   \brief data structure to hold the last sent property values
*/
struct IviTunerFavoritesPropertiesData
{
	FCriticalSection StationsMutex;
	TArray<FIviTunerStation> Stations{TArray<FIviTunerStation>()};
};
DEFINE_LOG_CATEGORY(LogIviTunerFavoritesOLinkClient);

UIviTunerFavoritesOLinkClient::UIviTunerFavoritesOLinkClient()
	: UAbstractIviTunerFavorites()
#if (ENGINE_MAJOR_VERSION == 4 && ENGINE_MINOR_VERSION < 27)
	, _SentData(MakeUnique<IviTunerFavoritesPropertiesData>())
#else
	, _SentData(MakePimpl<IviTunerFavoritesPropertiesData>())
#endif
{
	m_sink = std::make_shared<FUnrealOLinkSink>("ivi.tuner.Favorites");
}

UIviTunerFavoritesOLinkClient::UIviTunerFavoritesOLinkClient(FVTableHelper& Helper)
	: Super(Helper)
{
}
UIviTunerFavoritesOLinkClient::~UIviTunerFavoritesOLinkClient() = default;

void UIviTunerFavoritesOLinkClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	m_sink->setOnInitCallback([this]()
		{ _SubscriptionStatusChanged.Broadcast(true); });
	m_sink->setOnReleaseCallback([this]()
		{ _SubscriptionStatusChanged.Broadcast(false); });

	FUnrealOLinkSink::FPropertyChangedFunc PropertyChangedFunc = [this](const nlohmann::json& props)
	{
		this->applyState(props);
	};
	m_sink->setOnPropertyChangedCallback(PropertyChangedFunc);

	FUnrealOLinkSink::FSignalEmittedFunc SignalEmittedFunc = [this](const std::string& signalName, const nlohmann::json& args)
	{
		this->emitSignal(signalName, args);
	};
	m_sink->setOnSignalEmittedCallback(SignalEmittedFunc);

	check(GEngine);
	UIviTunerSettings* settings = GetMutableDefault<UIviTunerSettings>();

	UApiGearConnectionsStore* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionsStore>();

	TScriptInterface<IApiGearConnection> OLinkConnection = AGCM->GetConnection(settings->OLinkConnectionIdentifier);

	if (!OLinkConnection.GetInterface())
	{
		UE_LOG(LogIviTunerFavoritesOLinkClient, Warning, TEXT("No valid olink connection for the %s client, please set in the ApiGear IviTuner plugin settings or during run time"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}
	UseConnection(OLinkConnection);
	OLinkConnection->Connect();
}

void UIviTunerFavoritesOLinkClient::Deinitialize()
{
	// tell the sink that we are gone and should not try to be invoked
	m_sink->resetOnPropertyChangedCallback();
	m_sink->resetOnSignalEmittedCallback();
	m_sink->resetOnInitCallback();
	m_sink->resetOnReleaseCallback();

	if (Connection.GetObject())
	{
		UUnrealOLink* UnrealOLinkConnection = Cast<UUnrealOLink>(Connection.GetObject());
		UnrealOLinkConnection->unlinkObjectSource(m_sink->olinkObjectName());
		UnrealOLinkConnection->node()->registry().removeSink(m_sink->olinkObjectName());
	}

	Super::Deinitialize();
}

void UIviTunerFavoritesOLinkClient::UseConnection(TScriptInterface<IApiGearConnection> InConnection)
{
	checkf(InConnection.GetInterface() != nullptr, TEXT("Cannot use connection - interface IApiGearConnection is not fully implemented"));

	// only accept connections of type olink
	checkf(InConnection->GetConnectionProtocolIdentifier() == ApiGearOLinkProtocolIdentifier, TEXT("Cannot use connection - must be of type olink"));

	UUnrealOLink* UnrealOLinkConnection = nullptr;
	// remove old connection
	if (Connection.GetObject())
	{
		UnrealOLinkConnection = Cast<UUnrealOLink>(Connection.GetObject());
		UnrealOLinkConnection->unlinkObjectSource(m_sink->olinkObjectName());
		UnrealOLinkConnection->node()->registry().removeSink(m_sink->olinkObjectName());
		UnrealOLinkConnection = nullptr;
	}

	// set up new connection
	UnrealOLinkConnection = Cast<UUnrealOLink>(InConnection.GetObject());
	UnrealOLinkConnection->node()->registry().addSink(m_sink);
	UnrealOLinkConnection->linkObjectSource(m_sink->olinkObjectName());

	Connection = InConnection;
}

TArray<FIviTunerStation> UIviTunerFavoritesOLinkClient::GetStations_Implementation() const
{
	return Stations;
}

void UIviTunerFavoritesOLinkClient::SetStations_Implementation(const TArray<FIviTunerStation>& InStations)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogIviTunerFavoritesOLinkClient, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetStations_Implementation() == InStations)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->StationsMutex));
		if (_SentData->Stations == InStations)
		{
			return;
		}
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "stations");
	m_sink->GetNode()->setRemoteProperty(memberId, InStations);
	FScopeLock Lock(&(_SentData->StationsMutex));
	_SentData->Stations = InStations;
}

void UIviTunerFavoritesOLinkClient::SetStation_Implementation(int32 Index, const FIviTunerStation& Station)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogIviTunerFavoritesOLinkClient, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return;
	}
	ApiGear::ObjectLink::InvokeReplyFunc GetFavoritesStateFunc = [this](ApiGear::ObjectLink::InvokeReplyArg arg) {};
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "setStation");
	m_sink->GetNode()->invokeRemote(memberId, {Index, Station}, GetFavoritesStateFunc);
}

void UIviTunerFavoritesOLinkClient::ResetStation_Implementation(int32 Index)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogIviTunerFavoritesOLinkClient, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return;
	}
	ApiGear::ObjectLink::InvokeReplyFunc GetFavoritesStateFunc = [this](ApiGear::ObjectLink::InvokeReplyArg arg) {};
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "resetStation");
	m_sink->GetNode()->invokeRemote(memberId, {Index}, GetFavoritesStateFunc);
}

void UIviTunerFavoritesOLinkClient::ClearAll_Implementation()
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogIviTunerFavoritesOLinkClient, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return;
	}
	ApiGear::ObjectLink::InvokeReplyFunc GetFavoritesStateFunc = [this](ApiGear::ObjectLink::InvokeReplyArg arg) {};
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "clearAll");
	m_sink->GetNode()->invokeRemote(memberId, {}, GetFavoritesStateFunc);
}

bool UIviTunerFavoritesOLinkClient::_IsSubscribed() const
{
	return m_sink->IsReady();
}

void UIviTunerFavoritesOLinkClient::applyState(const nlohmann::json& fields)
{
	const bool bStationsChanged = fields.contains("stations") && (Stations != fields["stations"].get<TArray<FIviTunerStation>>());
	if (bStationsChanged)
	{
		Stations = fields["stations"].get<TArray<FIviTunerStation>>();
		Execute__GetSignals(this)->OnStationsChanged.Broadcast(Stations);
	}
}

void UIviTunerFavoritesOLinkClient::emitSignal(const std::string& signalName, const nlohmann::json& args)
{
}
